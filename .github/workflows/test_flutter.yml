name: Flutter CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - turk/ci

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: $HOME/flutter
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-


      - name: Check Flutter SDK directory
        run: |
          if [ ! -d "$HOME/flutter" ] || [ -z "$(ls -A $HOME/flutter)" ]; then
            echo "Flutter SDK directory is empty or does not exist."
          else
            echo "Flutter SDK directory exists and is not empty."
          fi

      - name: Install Flutter SDK
        run: |
          if [ ! -f "$HOME/flutter/bin/flutter" ]; then
            echo "Flutter SDK not found. Downloading..."
            git clone https://github.com/flutter/flutter.git -b stable --depth 1 $HOME/flutter
            echo "$HOME/flutter/bin" >> $GITHUB_PATH
            export PATH="$HOME/flutter/bin:$PATH"
          else
            echo "Flutter SDK already installed."
          fi
      
      - name: Save Flutter SDK to cache
        uses: actions/cache@v4
        with:
          path: $HOME/flutter
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}    


      - name: Debug Flutter SDK directory
        run: ls -la $HOME/flutter/bin

      - name: Verify Flutter installation
        run: flutter doctor

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-cache-  

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Build iOS (if applicable)
        if: runner.os == 'macOS'
        run: flutter build ios --release